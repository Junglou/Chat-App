import { Server } from "socket.io";
import http from "http";
import express from "express";

const app = express();
const server = http.createServer(app);

// C·∫•u h√¨nh CORS cho client
const io = new Server(server, {
  cors: {
    origin: ["http://localhost:5173"], // URL frontend
  },
});

// Map userId => socketId ƒë·ªÉ qu·∫£n l√Ω ng∆∞·ªùi d√πng online
const userSocketMap = {};

// H√†m get socketId theo userId
export function getReceiverSocketId(userId) {
  return userSocketMap[userId];
}

io.on("connection", (socket) => {
  console.log("üîå A user connected:", socket.id);

  // L·∫•y userId t·ª´ query v√† l∆∞u socketId
  const userId = socket.handshake.query.userId;
  if (userId) {
    userSocketMap[userId] = socket.id;
  }

  // G·ª≠i danh s√°ch ng∆∞·ªùi d√πng online ƒë·∫øn t·∫•t c·∫£ client
  io.emit("getOnlineUsers", Object.keys(userSocketMap));

  // üëâ L·∫Øng nghe s·ª± ki·ªán tham gia nh√≥m
  socket.on("joinGroup", (groupId) => {
    socket.join(groupId);
    console.log(`üë• User ${socket.id} joined group: ${groupId}`);
  });

  // üëâ Nh·∫≠n tin nh·∫Øn t·ª´ client v√† ph√°t ƒë·∫øn t·∫•t c·∫£ client trong group
  socket.on("sendGroupMessage", (data) => {
    const { groupId, message } = data;

    // ‚ùó FIXED: d√πng io.to(...) thay v√¨ socket.broadcast
    io.to(groupId).emit("receiveGroupMessage", data);

    console.log("üì® Message sent to group:", groupId, message);
  });

  // üëâ Khi user disconnect
  socket.on("disconnect", () => {
    console.log("‚ùå A user disconnected:", socket.id);

    if (userId) {
      delete userSocketMap[userId];
    }

    io.emit("getOnlineUsers", Object.keys(userSocketMap));
  });
});

export { io, app, server };
